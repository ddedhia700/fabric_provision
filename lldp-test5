- name: Collect and aggregate LLDP neighbor information
  hosts: switches
  gather_facts: no
  collections:
    - cisco.nxos
  tasks:
    - name: Gather LLDP neighbors
      cisco.nxos.nxos_command:
        commands: "show lldp neighbors | json"
      register: lldp_output
      delegate_facts: true

    - name: Parse LLDP JSON output and store links
      set_fact:
        lldp_links: "{{ lldp_output.stdout[0].TABLE_nbor.DETAIL | map('combine', {'local_interface': item.l_port_id, 'peer': item.sysname, 'peer_interface': item.port_id}) | list }}"
      when: lldp_output.stdout[0].TABLE_nbor is defined
      delegate_facts: true

    - name: Aggregate LLDP links to localhost
      set_fact:
        host_lldp: "{{ host_lldp | default({}) | combine({ inventory_hostname: hostvars[inventory_hostname].lldp_links }) }}"
      delegate_to: localhost
      delegate_facts: true
      run_once: true

    - name: Wait for LLDP data from all hosts
      set_fact:
        lldp_complete: "{{ hostvars | dict2items | select('match', 'lldp_links', 'defined') | length == groups['switches'] | length }}"
      delegate_to: localhost
      run_once: true
      until: lldp_complete
      retries: 10
      delay: 2
      when: inventory_hostname == groups['switches'][0]

    - name: Write aggregated LLDP output to file
      copy:
        content: "{{ hostvars['localhost'].host_lldp | to_json }}"
        dest: "{{ lldp_output_file }}"
        mode: '0644'
      delegate_to: localhost
      run_once: true
      when: inventory_hostname == groups['switches'][0]

- name: Assign /31 subnets to unique inter-switch links
  hosts: localhost
  gather_facts: no
  collections:
    - ansible.utils
  vars:
    main_subnet: "{{ main_subnet }}"
    counter_file: "{{ counter_file }}"
    host_subnet_file_prefix: "{{ host_subnet_file_prefix }}"
  tasks:
    - name: Read current subnet index from file
      slurp:
        src: "{{ counter_file }}"
      register: index_file
      ignore_errors: yes

    - name: Initialize subnet index
      set_fact:
        subnet_index: "{{ (index_file.content | b64decode | default('0') | int) }}"
        link_subnets: {}

    - name: Build unique switch pairs
      set_fact:
        unique_pairs: "{{ unique_pairs | default([]) + [item | combine({'src': min(item.local_host, item.peer), 'dst': max(item.local_host, item.peer), 'src_interface': item.local_interface if item.local_host < item.peer else item.peer_interface, 'dst_interface': item.peer_interface if item.local_host < item.peer else item.local_interface})] }}"
      loop: "{{ hostvars['localhost'].host_lldp | dict2items | map(attribute='value') | flatten | map('combine', {'local_host': item.key}) }}"

    - name: Assign subnets to unique pairs
      set_fact:
        link_subnets: "{{ link_subnets | combine({ item.src + '-' + item.dst: {'subnet': (main_subnet | ansible.utils.ipsubnet(31, subnet_index)), 'src_ip': (main_subnet | ansible.utils.ipsubnet(31, subnet_index) | ansible.utils.nthhost(1)), 'dst_ip': (main_subnet | ansible.utils.ipsubnet(31, subnet_index) | ansible.utils.nthhost(2)), 'src_interface': item.src_interface, 'dst_interface': item.dst_interface} }) }}"
        subnet_index: "{{ subnet_index | int + 1 }}"
      loop: "{{ unique_pairs | unique }}"

    - name: Save updated subnet index to file
      copy:
        content: "{{ subnet_index }}"
        dest: "{{ counter_file }}"
        mode: '0644'

    - name: Map subnets to hosts
      set_fact:
        host_subnets: "{{ host_subnets | default({}) | combine({ item.src: (host_subnets[item.src] | default([]) + [{'peer': item.dst, 'subnet': link_subnets[item.src + '-' + item.dst].subnet, 'ip': link_subnets[item.src + '-' + item.dst].src_ip, 'interface': link_subnets[item.src + '-' + item.dst].src_interface}] }) | combine({ item.dst: (host_subnets[item.dst] | default([]) + [{'peer': item.src, 'subnet': link_subnets[item.src + '-' + item.dst].subnet, 'ip': link_subnets[item.src + '-' + item.dst].dst_ip, 'interface': link_subnets[item.src + '-' + item.dst].dst_interface}] }) }}"
      loop: "{{ unique_pairs | unique }}"

    - name: Write per-host subnet assignments to files
      copy:
        content: "{{ host_subnets[item] | to_json }}"
        dest: "{{ host_subnet_file_prefix }}{{ item }}.json"
        mode: '0644'
      loop: "{{ host_subnets | dict2items | map(attribute='key') }}"

- name: Configure assigned subnets on switches
  hosts: switches
  gather_facts: no
  collections:
    - cisco.nxos
  tasks:
    - name: Print assigned subnets for this host
      debug:
        msg: "Host {{ inventory_hostname }} assigned links: {{ hostvars['localhost'].host_subnets[inventory_hostname] | default([]) }}"

    - name: Configure interfaces with assigned IPs
      cisco.nxos.nxos_config:
        lines:
          - "interface {{ item.interface }}"
          - "ip address {{ item.ip }}/31"
          - "no shutdown"
        save_when: modified
      loop: "{{ hostvars['localhost'].host_subnets[inventory_hostname] | default([]) }}"
      when: hostvars['localhost'].host_subnets[inventory_hostname] is defined
